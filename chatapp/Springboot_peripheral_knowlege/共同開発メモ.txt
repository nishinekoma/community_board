やってみたいことリスト
・JSとのJava連携。

サーバーサイド
・Node.js
クライアントサイド


前提条件
・WEBアプリは　ECサイトの商品購入や銀行のような振込のできるもの。
具体例は　Youtube　Twitter　ネットバイキング

・手段は問わない（委託はだめ。）
・言語は豊富に使う。
・動的であること
・モデルはMVCモデルかな。
・githubでの開発。
開発
・Javaに関する知識があるため、ECサイトのようなものを目指す。
・チャットアプリもやってみたい　Go学びながらになるのかな？
・時間があれば機械学習を用意る開発

開発環境
Java17
エディタ Eclipse　（gitからプルする時に誤差がなければ他のエディタ化）
EcilpseのGit連携機能あるからそれメインになりそう。
（他あったら提示よろしく。）
目的
Springbootを使用したWEBアプリ開発をする。
できるだけ実際の現場を模倣しながら（できうる限り）で開発を進めていきたい。
バックエンド処理によるPHPでデータベース格納をできることを目標に挙げる
最悪でも8月中には完成させる。（予定・気合。）
使用言語
フロント
HTML,CSS,Js　その他これらの拡張機能（JQueryとか）
バック
Java、PHP（Goやる？）

その他知識
Lombok　依存関係設定
・ライブラリ（単純で決まりきった記述：SetterとかGetterのやつ）を＠（アノテーション）で済むようになる。
/inputにアクセスされたらHTMLを出力のように簡単になる
・
Thymeleaf(タイムリーフ)
https://qiita.com/opengl-8080/items/eb3bf3b5301bae398cc2
    ・JavaとHTMLのデータ関連（変数）の関連付けって考えでいい感じですかね？
    ・Javaのテンプレートエンジンライブラリ
    ・XML/XHTML/HTML5で書かれたテンプレートを変換して、アプリケーションの
    　データやテキストを表示することができます。

参考URL　これをもとに開発する
    https://www.tsuchiya.blog/spring-boot-step1/#toc1

    開発参考
    https://www.tsuchiya.blog/spring-boot-step1/

見ておくべきもの
Eclipse　git 共同開発の基本
https://qiita.com/negisys/items/36b8e01d5fc88043f080
・リポジトリの管理者を決めmasterブランチを管理する。
・各開発者はそれぞれブランチを持つ
・各開発者はコミットをする前に必ずpullをする

Eclipseエラー対策
・"release 20 is not found in the system" が原因で、プロジェクトはビルドされませんでした。
    プロジェクトを右クリック→プロパティ→コンパイラ→１７にする（バージョンによる）
・Java コンパイラー・レベルが、インストールされている Java プロジェクト・ファセットのバージョンと一致しません。
    プロジェクト右クリっく→プロパティ→プロジェクト・ファセット→「Java」セクションで、正しい Java バージョンが選択されていることを確認
・なんかコンソール画面（出力）文字化けした時の対処法
    プロジェクトを右クリック → [実行] → [実行の構成] をクリック。 「実行構成」ウインドウの「共通」タブの「エンコード」
    を「その他：MS932」に設定する。 「実行構成」ウインドウの「実行」ボタンをクリックする。 文字化けしなくなりました。
・Eclipseのパッケージエクスプローラの所でファイル追加したら　「？」マークができてた
    githubと連携しているので　「ローカルでは存在しているが、サーバでは存在していない」　とのことらしい。
    gitでpushしたらなおるのかなわからん。
・import文で未使用のimport文が消えるる。　※　やっといたほうがいい
    ・ウィンドウ→設定→Java→エディター→保存アクション→インポートの編成
・github上からmvnぽいプロジェクトを取得した時に、インポートできないという風なエラーが起きた場合。
    ・.metadateを消す。ワークスペースとして認識されている状態にあるため、metadateを消して解決する

/*-------個人メモ-------*/
西村　
webサーバとは　　https://qiita.com/yCroma/items/e46476e2ac7c372bb2a3
    代表
    ・Apache（マルチプロセスのプロセス駆動アーキテクチャ）
        ・リクエスト大量に来た時にプロセスが同時に起動するため　オーバーヘッド（負荷処負荷
        ・負荷が低く、早期または簡易的なセットアップが必要な場合
        ・同時アクセス数が小さく、単純にリクエスト数が多いような場合
    ・Nginxがある。
        ・Node.jsと同じように、イベントループ方式（シングルスレッドでループ処理をし、
        　キューにたまったイベントを処理していく方式）
        ・負荷が高く、スケーラビリティが要求されるような場合
　　    ・静的ページに同時多数のアクセスが想定されるような場合
    結論
    ・プロセスやスレッドの管理がHTTPリクエストを捌く上で肝心である。

APサーバとは　※今回はこれにあたる。https://thinkit.co.jp/article/11837
    代表
    ・Apache Tomcat,Node.js,Puma,Unicorm等
    特長
    ・HTTPリクエストから動的コンテンツを生成しレスポンスを返すようなサーバ

結論
Webサーバには、主にクライアントからのリクエストに対して
「静的コンテンツを見せること」と「APサーバに動的コンテンツを要求し、
返ってきた結果を見せること」という2つの役割があります。

クライアント窓口WEBページ（静的）→　処理を動的にするAPサーバ→APサーバからリクエストのあった場合
ミドルウェアについて
    ・ミドルウェアをインストールすることで特定の処理や複雑な動作が可能。OSとアプリ間の中間に位置し補助担当するところ。
        ミドルウェアの図解をこのファイルと同じ階層にのせておく。
    ・ミドルウェアは単体で動くのではなく、サーバにインストールしてはじめて使用できます。
斎藤
・

/------------*チャットアプリ・掲示板作り*------------/
参考サイト
・サーブレットなのでコードの参考程度に作る
    ・https://magazine.techacademy.jp/magazine/22175
・掲示板の入力フォームを作る（必要最低限）
    https://zenn.dev/angelica/books/52be1e365c61ea/viewer/3adab0
用意するもの
・データベース
・データモデル
・データベースアクセスオブジェクト
・投稿したメッセージの一覧表示（履歴）
・データベースからのデータを全件取得し、取得データを画面へ引き渡すサーブレット
・画面の入力ホームを内容をもとに、データベースに一見データを追加するサーブレット

要件
・ユーザが入力したデータをＤＢに保存して、保存した内容をユーザに返す必要がある。

log 流れ 西村メモ　※これ見てね。
https://zenn.dev/angelica/books/52be1e365c61ea/viewer/7b55e1
・↑のリンクを起点にやっていく。Eclipseにて
・thymeleafでSSRをする。
　用語
    ・SSR（サーバサイドレンダリング）　サーバー側、バックエンドでHTMLを組み立てることを言う。
    ・クライアントサイドレンダリング　　ユーザのブラウザに配信されてからJavaScriptによってHTMLを組み立てること。
　特長
    ・thymeleaf（タイムリーフ）は動的HTMLをレンダリング

<!DOCTYPE html>
    ・プログラ的にはブラウザがどのHTMLバージョンのを解釈する
    2022年8月現在、HTMLの最新バージョンは「HTML Living Standard」
        HTML５とは何ら変わりないが廃止されている。　CSS3はそのまま

xmlns:layout (hell.html layout.html)　について調べる
    名前空間について
        ・http://www.ultraq.net.nz/thymeleaf/layout
        ・Javaでいうパッケージライブラリのようなもの。　ちなこれgithubのURL（URI）※類似している　厳密に違う。
            理由
                ・ライブラリ動詞の衝突を避ける。名前の一意
                ・名前空間は、要素や属性の一意の識別子を提供するために使用され、URLやURIが一般的にその役割を果たします。

<!--で、例えばhttp://localhost:8080/helloで指定した時に
hello.htmlにはlayout.htmlのレイアウトが適用される（基盤がこれになる）という解釈であってますか？
そしてxmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
という風な名前空間はURLでのパッケージのようなもの。（ライブラリの関係の依存関係の
衝突を避けること。）
要は。名前空間は、ライブラリやツールが提供する要素や属性を他の要素と区別するために使用される。
異なるライブラリが同じ要素名や属性名を使用しても、名前空間が異なるために衝突を回避できます。-->

後はちょこちょこhtmlの構文解析

今はアノテーションを詳しくやってる。
BoardController.javaの処理をデバッグしまくっておってる。
んで　バインド　ハンドラ　二重送信防止（RPGパターン）　立ち上げたサイトF12で処理の可視化をやってる。

javaxが動作しないことがようやく理解できたので、jakartaに変更した。
https://zenn.dev/toranoko114/articles/21188d4a144839


用語
・レンダリング　参考：　https://wa3.i-3-i.info/word1359.html
    ・表示用のデータ（元）をもとに、内容を整形（CSS、HTMLとかラベルによって整形して）して表示すること。
・component(コンポーネント)　
    英訳
    ・　形容詞　：構成している、成分の　　
    ・部品を意味する。　機会や電子機器、　　主にアプリケーションに含まれる　ソフトウェアの部品ともある。

・サードパーティ
    ・第三者。　名前の通り純正品でなく、　他の企業がオリジナルと互換性のあるものを販売しているメーカーを指す
開発の全体像　（仕組み　動作関連）
・Tomcatにアクセスする　→　対応するJavaのプログラムが実行される。

    役割
        Controller :SpringWeb
MVCアーキテクチャ
    ・component 
        MOdel(date,logic,rule)
            ・アプリケーションデータ　ビジネスルール　ロジックなどの処理
        View
            ・テキスト、グラフ、図など、情報表現
        Controller
            ・ユーザーからの入力を受け取り、ModelとViewへの命令に変換する処理を持つ

Ajax（ウェブ）
    ・DHTML（JavaScript＋CSS）とXMLHttpRequestにサーバーサイドのウェブアプリケーションとを合わせ技の事をAjaxという

デコード　decode
    ・英語意味　(...の)暗号を説く、平文に直す
    ・何らかの規約にしたがって符号化されたデータを、元の形式に戻すこと。
        ・例　マイクロプロセッサ等のＨＤウェアに対して演算気や命令実行モジュールに支持を与えたりすることもデコード。

ユースケース
    ・利用者があるシステムを用いて特定の目的を達するまでの、双方のやり取りを明確に定義したもの
    ・利用者は機器を操作する人間以外にも外部の他のシステムを想定する場合もある。
    ・目的を達成使用とする際、特定の状態からスタートしてドンのような応答が行われるべきかを定義する

runtime class （ランタイムクラス）
・実行中のJavaのアプリケーションを管理するクラスのことです。


ボイラープレート
    ・お決まりコード。高頻度で使いまわされるコード。

アスペクト　外観、反復、継続、関心事
    ・いろいろな場所で事項することがある共通処理のことを指す。



疑問
・なぜ8080ポートなのか
    ・SpringBootのサーブレットコンテナであるTomcatは8080番ポートで通信を待ち受けるため、
    　HTTPデフォルトの80番ではなく、8080番を明示しています。

・SpringbootとSpringWebの違い　（なんかサイトに出てくるので）
    Springboot
    　・SpringFramework上に構築されたプロジェクトの作成と設定を簡素化する　ツール。
            主　：自動設定（Eclilpseの場合スターターだとlombokを入れるとか出てくる。）
            　　　統一されたデフォルト、スタータプロジェクトなどを提供し、
                    ※　セットアップの手間を減らすことを目指す。
            できること
                ・マイクロソフトサービスやRESTful APIなどのアプリケーションを迅速に作成可能
                ・サードパーティ（第三者）のライブラリやフレームワークの統合が容易。

    Spring Web
      ・Spring Frameworkの一部で　Webアプリケーションを構築するための機能とコンポーネントを提供する
    　  ・

・ハンドラ　　https://blog.senseshare.jp/handler.html
    定義：何かを扱おうとした時に、それを行いやすくしたくれるものの「総称」　
    　　　複雑な操作を間に入って代わりに行ってくれる
    ・実態は　クラスや関数など色々な形で用意されている。

・バリデーション
    ・サービスの仕様に従ったデータしか受け取らないようにデータをチェックし、
    　誤っていれば入力フォームに誤っている内容を出力する、というもの
・エンティティ
    ・データモデルの構成要素の一つ。　データの集まり。

・モダン　現代的な　今風な
    ・モダンウェブサイト　→　最新のウェブデザイン・開発のトレンドや
    　テクノロジーを活用してユーザエクスペリエンス（感動、印象、ユーザが感じる使いやすさ）

・セマンティクス　コードの断片

・バインド　https://wa3.i-3-i.info/word12448.html
    何かと何かを関連付けるもの。
    例
        ・前提
                ・DBに年齢別に人数が格納されている。
                ・指示文　「これから『年齢がX歳の人は何人いる？』って聞いていくから。
                    『X』の部分は都度指示するから読み替えてね」
            ・「X=10」「X=20」...
            　このように変数だけをねじ込み楽をすることを　バインドする　という。
                →ここでは SQL文に変数を「バインド」　する　と言ったりする

ビジネスロジック　（システム固有の処理）
    システムにおいて、そのシステムとしての実際のお仕事とをする部分のこと
    ・ビジネスロジックを分ける　本質
        ・使い回しできるところとできないところを分離する
        ・システムに変更が必要な時に見る必要がある所とない所を分離する
    ・言い換え
        ・システム固有の処理
/*-------リクエストハンドリング-------*/
定義：ウェブアプリケーション内でHTTPリクエストを受け取り、それに対応する処理を行うことを指す。
        →クライアントからのwebリクリエーションを受け取る　→　　アクション。

/*-------HTML-------*/
・インライン要素　https://it-biz.online/web-design/inline-block/
    ・行の中の一部のまとまり
        <span>
・ブロック要素
    ・行全体のまとまり。
        <div>


/*-------CSS-------*/
<!--style cssにリンク付け thymeleafの場合-->
<link th:href="@{/css/style.css}" rel="stylesheet" type="text/css">
    cssファイルの場所
        ・プロジェクト名\src\main\resources\staticの　static フォルダ配下にないと読み込まれない。

    flex/*その直下の要素が並列になる*/

指定単位 詳しくはリンク見たほうが早い　HTMLの値基準
    rem
    https://www.pc-koubou.jp/magazine/23912#section01

色について　色　参考サイト　カラーコード
https://www.google.com/search?q=%23f0f8ff&rlz=1C1TKQJ_jaJP1030JP1030&oq=%23f0f8ff&gs_lcrp=EgZjaHJvbWUyBggAEEUYOdIBBzU1OGowajeoAgCwAgA&sourceid=chrome&ie=UTF-8


/*-------英語　単語　英単語　メモ-------*/
duplicate(デュプリケイト)　重複の、二重の、複製の
Duplicating(デュプリケイティング)重複の、二重の
solved 解決する　解く、解決する。
validation 確認、批准　「妥当性を検証すること。」
hidernate(ハイダァーネート)冬眠する　ひきこもる　
constraint(コンストレイント)強制する、制約するもの　束縛
above（アバう）ある基準点から離れて上に　よりむしろ　...より上に
annotation(アノテーション)注釈（意味を解説）
manage(マネッジ)どうにかする　コア　扱う
increment（インクリメント）名詞：増加　増大
infrastructure(インフラストラクチャー)（団体などの）下部組織、基盤、基本的施設。
bifined(ディファイン)動詞：定義された
bind(バインド)結びつける
properties(プロパティイズ)名詞：財産　資産　（複数形）
Effective（エフェクティブ）形容詞　名詞　：有効な　効力のある　実際の　事実上の
subject(サブジェクト)　主題、問題、題目、題材、画題、（写真の）被写体
hibernate(ハイバネイト)冬眠する、引きこもる
Accumulate（アキュミュレイト）動詞：（長期にわたって）（...を）ためる、蓄積する
Whether(ウェザー)core:...かどうか　（２つ　またはそれよりも多く）の可能性を取り上げる。
authorities(オーソりティイズ)authorityの複数形。権威、 権力、 威信、 重み、 にらみ
Customizer（カスタマイザー）個々のニーズや好みに合わせて、製品やサービスを変更・調整すること
register(レジスター)記録、登記|
Attribute(アトリビュート)属性
details(デーテェィルズ)細部、ささやかなこと
Granted（グラディット）（動詞）付与された、
ROLE（ロール）役割、任務、役目　
/*-------java用語 java関連-------*/
JavaBeans 　https://camp.trainocate.co.jp/magazine/whats-javabeans/
    ・由来　
        ・Javaのロゴがコーヒーであることから、コーヒーの原料であるコーヒー豆が由来であるといわれています。
    ・仕様定義
        ・ユーザーが入力した内容をサーバへ送信したり、データベースに保存したりする際、それらのデータをひとつの「Bean」
        　として定義することで扱いやすくなる
        ・クラスやライブラリとして提供しているわけではない。
    ・使用
        ・以下のルールに則ってクラス作成をする。
            ・getter/setterメソッドを用意する
            ・引数なしのpublicコンストラクタを作成する
            ・java.io.Serializableを実装する
        ・慣例
            ・クラスはpublicで宣言する
            ・クラス名は「~Bean」とする
    ・使用メリット
        ・カプセル化：要素の細かいアクセス制御等
        ・シリアライズで通信に利用できる。

NullPointExceptionについて　Nullチェック理由
    ・存在理由
        ・前提
            ・javaはオブジェクト指向によって作られており多くの　「メソッド」「プロパティ」　はオブジェクトが
            　存在していることを前提に作られている
            ・Null自体はオブジェクトが存在しない特殊な値。
    ・主な理由
        ・メソッドの呼び出しができない　    ⇒オブジェクトがないため
        ・プロパティにアクセスできない。　  ⇒オブジェクトがないことを示すのが　null　のため
        ・メソッドの返り値　　　　　　　　  ⇒まずnullを処理できるものが少ない。
    ・意図的にＮｕｌｌを使用する場面
        ・未初期化の状態を表現する場合。
        ・値が存在しないことを表現する場合。
        ・エラーや例外の状態を表現する場合。

private finalについて
    private 他のクラスから直接いじられるのを防ぐ。
    final   初期化されたら二度と代入できない
        ・方法
            ・コンストラクタ。
            ・インスタンス初期化ブロック　（コンストラクタの　｛｝）
            ・初期化時に直接代入する　例　private final a = "fd"
@RequiredArgsConstructor(access = AccessLevel.PRIVATE)
    コンストラクタがprivate。他のクラスからこのインスタンスを生成するにはそれ用のメソッドを用意しておいて
                            そこからやるしかない。
final
    クラス　継承不可
    メソッド　オーバーライド不可
    変数　定数となり変更不可
    引数　メソッド内で変更不可

Mybatis（SQL）
    JavaアプリケーションとDBの間でSQLクエリを実行するためのSQLフレームワーク
    このフレームワークを利用するとDBとのやり取りをより簡単にすることができる。
    ・Mappingについて
        ・マッピングは　JavaオブジェクトとDBのテーブルやカラム（データベーステーブル内の列）の
        　関連性を定義しそれらを相互に変換するプロセスを指す。
    ・Mybatis　永続化機能
        永続化・・・プログラム終了後もデータが失われないようにデータをファイルやデータベースに保存することを指す。
            ・必要な理由（永続化）
                ・オブジェクト指向プログラミングはあるクラスのインスタンスでメソッドを呼び特定の処理を実行する。
                ・処理を事項するに当たり各処理の記録をデータとして長期的に記憶する必要がある。
                ・インスタンスはメインメモリ上に生成されるため、プログラムの終了とともにそのデータは消失してしまう。
                    ・上記のため、プログラムで実行された処理結果データをDBに保存する処理（永続化が）必要になる。

デザインパターンとは
    ・過去他のプログラマが直面している問題を幾度となく考え、それを再利用したものをいう。
        ・具体的に
            ・よく使われる設計を一般化された形でまとめたもの
            ・具体的な実装を提供するものではなく、あくまでコンセプト（概念・骨組み）として参照されていること。
DI(Dependency Injection:依存性注入)　　https://programming-tips.jp/archives/o/25/index.html
    要約
        ・クラス間の依存を弱くするための設計パターン
            ・依存性とはオブジェクトのこと
    説明
        ・ＤＩはあるクラスに対して、依存性（オブジェクト）を外側から注入することをいう。
    ポイント
        ・new                   強い依存
        ・依存性の注入(DI)は    弱い依存

レジストリ
    保存（特定の情報など）　
ラムダ式 これ見ろ
https://www.bold.ne.jp/engineer-club/java-lambda-expression

Spring　Security
最終更新日 2023年07月11日　Spring Securityのアーキテクチャの理解（Filter Chain、 AuthenticationManager 、 AccessDecisionManager など）
https://qiita.com/suke_masa/items/908805dd45df08ba28d8
詳しくは @suke_masa さんの Spring Security 5.7でセキュリティ設定の書き方が大幅に変わる件 - Qiita 
https://qiita.com/suke_masa/items/908805dd45df08ba28d8

/*-------クライアント対策　ユーザビリティ-------*/
２重送信防止の必要性　https://terasolunaorg.github.io/guideline/current/ja/ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection.html
    ・対策　
    ・PRG(Post-Redirect-Get)パターンの適用
    ・
・JavaでのEmail　正規表現とか色々あるやつ。
    ・https://mailtrap.io/blog/java-email-validation/

・MyBatis　（よく使われる例）
    Javaでよく使われる永続化フレームワークの一つ。類似に　Hibernate
        ・自分で設定したら大変に面倒くさいDBとの連携をスムーズに行ってくれる。
    設定
    resources配下にmybatisそのものの設定ファイルを作成します。
/-------*知識*-------/
・クライアントサイドのバリデーションは、ユーザの利便性のみのために存在しますので、
    セキュリティ向上の役には全く立たないことを覚えておいてください。

/-------*application.yml DB データベース*-------/
コネクションプール：要はアプリ起動時ずっと接続を維持するのではなくて必要な時にデータベースをやり取りする接続の仕組み

データベース　⇒　JDBC（Java Database Connectivity）


JDBC　図解あり
    ・JDBCは javaプログラム⇒JDBCAPI（javaAPI）⇒JDBCドライバ⇒データベースみたいな感じ
    ・要はjavaとDBの仲介する役
    歴史　https://atmarkit.itmedia.co.jp/ait/articles/0106/26/news001.html
    ・

コネクションリークについて
      leakDetectionThreshold: 5000 #5000ミリ秒　5秒以上開いたままになっている場合にコネクションリークを検出
      説明
      データベース接続が正しくクローズ（解放）されずに残ってしまう状態のことを指します。
      データベース接続はリソースを消費するため、不要な接続が残っていると、
      システムのパフォーマンスやリソース使用量に影響を及ぼす可能性があり。

      ・リソースを消費するとは
        ・メモリ：　DB接続に関連する情報や一時的なデータなどがメモリに保持されている。
                    接続ごとに一定のメモリが必要。
        ・ネットワークリソース：データベースとの通信にはネットが必要。　接続ごとに帯域幅が使用される。

        ・スレッドorプロセス：DB接続を処理するためにアプリ内でスレッドやプロセスが作成される時がある。
                             
最小アイドルコネクション数（Minimum Idle Connections）
    コネクションプール内にある　常にアイドル（利用されていない）状態のコネクションの最小数を指定するもの。
        理由：アプリケーションが即座にコネクションを提供するため　（利便性）　の向上のため
    ・利用されず待機状態にあるやつ　⇒　アイドル状態

/-------*SQL*-------/
/*-------document ドキュメント見方　全体知識-------*/
java APIのdocumentを見るときは、実行環境で使っているものJava17とかだったら
Java17　APIを調べそこから階層ごとに見てったほうがいい。（しらべてメソッドなかった場合）