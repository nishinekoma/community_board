https://spring.pleiades.io/spring-boot/docs/current/reference/html/features.html#features.external-config.typesafe-configuration-properties.conversion
このりんくみながら解説。
ブートストラップ：アプリケーションの起動プロセス。
OSのBIOSに当たる。


https://tech.excite.co.jp/entry/2022/09/30/200658
application.ymlは主に環境ごとに異なるデータを定義したり、
各種ライブラリが使用するデータを定義するためのYAML形式のファイルです。

読み込む
ConfigurationPropertiesScan, RequiredArgsConstructor , 
ConstructorBinding , ConfigurationProperties 等を併用してクラス
でDIする


/------*database relation*------/
H2 のインメモリとは
    ・アプリが実行されている間の時にメモリ内で動作し、データを格納及び操作するデータベースのタイプ。
    ・アプリが終了後、データは消える。
    ・データの永続性（要はあるルールにのっとり、保存に重みを置いた解釈）
        ・オブジェクトをデータベースに格納可能な形式に変換し、後で容易に検索できるようにし、
        　同時にオブジェクト同士の関係の特性を保持する点である。　-- wiki引用

DBのパーティション化について
参考https://xn--w8j8bac3czf5bl7e.com/2018/12/25/%E8%B6%85%E5%9B%B3%E8%A7%A3%E3%83%91%E3%83%BC%E3%83%86%E3%82%A3%E3%82%B7%E3%83%A7%E3%83%B3%E5%8C%961-5-%E3%83%91%E3%83%BC%E3%83%86%E3%82%A3%E3%82%B7%E3%83%A7%E3%83%B3%E4%BA%8B%E5%A7%8B%E3%82%81/
    ・定義
        ・特定のカラム（表の列：縦）を分裂キーとしてその値の種類によりテーブルを
        　物理的に複数のセグメントに分割すること。
    ・利点
        ・SQLによりアクセスする物理領域を一部に限定することが可能。
            →読み込むブロックを減らし、処理を高速化できる。
        ・パーティションごとに物理セグメントが分割されて個々のパーティション単位でDROP
        　やTRUNCATEなどの管理作業が行える。
DBマイグレーション化について
    ・定義
        ・DBを削除してから作り直すと全てのデータ消えるのでそういった事態を回避するめにある。
        ・DBに保存されているデータを保持したまま、テーブル作成やカラムの変更などを行うこと。

/---*application.yml関連について*---/
参考　
https://apidog.com/jp/blog/how-to-convert-json-api-to-yaml/#:~:text=%E4%BA%BA%E9%96%93%E3%81%AE%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D,%E6%A7%8B%E9%80%A0%E3%82%92%E8%A1%A8%E7%8F%BE%E3%81%97%E3%81%BE%E3%81%99%E3%80%82

YAML形式について
    ・yaml（省略形yml）ではコメントを記述できる。
    ・データ形式をＪＳＯＮより分かりやすく記述できるため、データ構造か複雑になるほど
    　インデントにやる表現のメリットが高い。
    ・データ型で文字列を""で囲む必要がない
    ・

Json形式について
(JavaScript Object Notation)は、データの表現と交換に使用される軽量なデータ式。
                                プログラミング言語に依存せずにデータを記述できる。
    特長
    ・機械的な処理に向いている。
        理由：コメントを記述できないため。
/---*用語*---/
application.yml関連について
複数の並列データを直列化して送信すること。

バイパスする" 
という言葉は、通常、何かを回避して直接的に何かを行うこ
とを指します。この文脈で "接続プールをバイパスする" とは、Spring Boot
が提供するデフォルトの接続プールアルゴリズムを使用せずに、開発者が
独自の接続プールを設定することを意味します。

JDBC　
    ・JavaプログラムからＤＢにアクセスするための標準ＡＰＩの一つ。
    ・

発行する　表現
SQLのDB格納元は開発者が作っておいてJavaからいじりたいときにJDBC
が使われる。その時にクライアントがアクションを起こした時にSQLが使われるから
発行という表現になる。

Spring JDBC(Spring JDBC)
    特長
    ・自分でNativeなSQLを書く。
    ・Spring JDBCはデフォのJDBCをいい感じに使えるようにした奴
    ・JdbcTemplateクラスのメソッドを使うだけでデータ登録/更新/検索/削除が可能。
    ・RowMapperインターフェースを使えばBeanクラスへのマッピング処理をいい感じにできる。
    ・application.propertiesにDBDB接続情報を定義するだけで接続可能(これはSpringBootの機能である)

JPA

ORM( Object-relational mapping、O/RM、ORM)
    ・

/---*設計思想・駆動*---/　
ドメインオブジェクト
    定義
ドメインモデル設計　：　https://zenn.dev/marimoofficial/articles/120fa4932995fe
    ・要点
        ・オブジェクト指向で業務ロジックを整理する
        ・業務の関心ごとにコードを直接対応させ、どこに何が書いてあるかわかりやすく整理する。
        ・業務ルールの変更や追加の時に、変更の影響を狭い範囲に閉じ込める。
        ・複雑なロジックを整理しやすい。
    ・ドメインモデルはむずいのか。
        ・要件定義やオブジェクト指向プログラミングが足りないや手続き型の設計死か知らない場合。
    ・ドメインモデルを設計するのに必要な活動2点
        ・分析・・・人間のやりたいことを正しく正しく理解する
        ・設計・・・人間のやりたいことを動くソフトウェアとして実現する方法を考える。
            ・必要な行動   
                ・要件の聞き取り
                ・不明点を確かめる会話
                ・図や表を使って整理
                ・理解した結果を記録するための文書の作成。
            ・設計に必要な行動
                ・分析した内容をもとにプログラムをどのような構造で組み立てればよいか。
                    -- 検討事項
                        - パッケージ構成
                        - クラス構成と名前
                        - メソッド構成と名前

ドメインモデルとデータモデルでは何が違うのか
    ・ドメインモデル・・・業務ロジックの整理の手法。業務データを判断/加工計算するためのロジック
                        を「クラス」という単位で整理するのがドメインオブジェクトの考え方。
    ・データモデル・・・・データが主役。業務で発生する様々なデータを整理してどのようにテーブルに記録するか
                        を考える。
DDD（Domain-Driven-Design）：　https://www.ogis-ri.co.jp/otc/hiroba/technical/DDDEssence/chap1.html#:~:text=DDD%E3%81%A8%E3%81%AF%E3%81%A9%E3%82%93%E3%81%AA%E8%A8%AD%E8%A8%88,%E3%81%93%E3%81%86%E3%81%A8%E3%81%99%E3%82%8B%E8%80%83%E3%81%88%E6%96%B9%E3%81%A7%E3%81%99%E3%80%82
　前提知識
    ・ここでのドメインは「知識、影響力、活動の一領域」
        →ドメイン層はユーザの業務に直接関わる。
    ・アジャルな開発プロセスを前提にしている。
    ドメイン駆動設計
        定義
            ・デザインパターン・設計思想・哲学である。
            ・ドメインモデルをソフトウェア開発の中心においてコードやコミュニケーションを
            　　常にドメインモデルと一体化させながら、ドメインモデルを反復的に深化させることで
            　　より価値の高いアプリを生み出していこうとする考え。
        要点
            ・ドメインモデルはドメイン知識を含めながら反復的(iterative)に深化させていく。
            ・ドメインモデルが、開発者とドメイン知識を持つ人（ユーザ、専門家等）との共通言語となるようにする。
            ・ドメインモデルと実装コードとがきちんと対応つけられるようにする。

URI  =  URL + URN
         URI :  世の中のすべてのリソースを識別する．    URL： 位置を示す． URN： 名前を示す．
　  UUID： 世の中のすべてのリソースを識別するためのID       １２８bit   例）GUID: 6fc39073-84d7-4aa9-8299-7965c89aae3b
　

/-----*http*-----/
主なメソッドﾞ（クライアントからサーバへ）
　-　GET：URLで指示されているデータをサーバに要求．（取得）　URLに書き込まれる。
　　	本来（REST）であれば，同じURLのデータは同じ．キャッシ可能．
　-　POST：サーバにデータを送信する．（作成）
		Body部にデータを格納して送る．結果が変わる（動的なページ）　URLに書き込まれない。
　-　PUT：サーバ上のデータを更新する．（更新） 
　　　　 Body部にデータを格納して送る．　　
　-　DELETE：サーバ上のデータを削除．（削除）

　-　HEAD：HTTPのヘッダ部分だけを要求． （取得）


XMLデータ記述しき　json yaml town等。


