https://spring.pleiades.io/spring-boot/docs/current/reference/html/features.html#features.external-config.typesafe-configuration-properties.conversion
このりんくみながら解説。
ブートストラップ：アプリケーションの起動プロセス。
OSのBIOSに当たる。


https://tech.excite.co.jp/entry/2022/09/30/200658
application.ymlは主に環境ごとに異なるデータを定義したり、
各種ライブラリが使用するデータを定義するためのYAML形式のファイルです。

読み込む
ConfigurationPropertiesScan, RequiredArgsConstructor , 
ConstructorBinding , ConfigurationProperties 等を併用してクラス
でDIする


/------*database relation*------/
H2 のインメモリとは
    ・アプリが実行されている間の時にメモリ内で動作し、データを格納及び操作するデータベースのタイプ。
    ・アプリが終了後、データは消える。
    ・データの永続性（要はあるルールにのっとり、保存に重みを置いた解釈）
        ・オブジェクトをデータベースに格納可能な形式に変換し、後で容易に検索できるようにし、
        　同時にオブジェクト同士の関係の特性を保持する点である。　-- wiki引用

DBのパーティション化について
参考https://xn--w8j8bac3czf5bl7e.com/2018/12/25/%E8%B6%85%E5%9B%B3%E8%A7%A3%E3%83%91%E3%83%BC%E3%83%86%E3%82%A3%E3%82%B7%E3%83%A7%E3%83%B3%E5%8C%961-5-%E3%83%91%E3%83%BC%E3%83%86%E3%82%A3%E3%82%B7%E3%83%A7%E3%83%B3%E4%BA%8B%E5%A7%8B%E3%82%81/
    ・定義
        ・特定のカラム（表の列：縦）を分裂キーとしてその値の種類によりテーブルを
        　物理的に複数のセグメントに分割すること。
    ・利点
        ・SQLによりアクセスする物理領域を一部に限定することが可能。
            →読み込むブロックを減らし、処理を高速化できる。
        ・パーティションごとに物理セグメントが分割されて個々のパーティション単位でDROP
        　やTRUNCATEなどの管理作業が行える。
DBマイグレーション化について
    ・定義
        ・DBを削除してから作り直すと全てのデータ消えるのでそういった事態を回避するめにある。
        ・DBに保存されているデータを保持したまま、テーブル作成やカラムの変更などを行うこと。

トランザクション整合性の境界について　https://blog.j5ik2o.me/entry/2020/06/16/105311
　前提
    ・トランザクション：　DBにおける一連の操作「追加・更新・削除」をひとまとめにしたものを指す。
    ・整合性：          ２つの事柄の間にずれや矛盾がなくぴったり一致していること。論理に破綻がない状態
    ・定義
        ・トランザクション整合性の境界は一連の動作（前述）がどこから始まりどこで終わるかを定義すること。

ライフサイクルの境界
    ・データが生まれてしぬまでのことを指す（？）
    作成→保存→利用→共有→長期保管→破棄のステージに分かれている。
/---*application.yml関連について*---/
参考　
https://apidog.com/jp/blog/how-to-convert-json-api-to-yaml/#:~:text=%E4%BA%BA%E9%96%93%E3%81%AE%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D,%E6%A7%8B%E9%80%A0%E3%82%92%E8%A1%A8%E7%8F%BE%E3%81%97%E3%81%BE%E3%81%99%E3%80%82

YAML形式について
    ・yaml（省略形yml）ではコメントを記述できる。
    ・データ形式をＪＳＯＮより分かりやすく記述できるため、データ構造か複雑になるほど
    　インデントにやる表現のメリットが高い。
    ・データ型で文字列を""で囲む必要がない
    ・

Json形式について
(JavaScript Object Notation)は、データの表現と交換に使用される軽量なデータ式。
                                プログラミング言語に依存せずにデータを記述できる。
    特長
    ・機械的な処理に向いている。
        理由：コメントを記述できないため。
/---*用語*---/
application.yml関連について
複数の並列データを直列化して送信すること。

バイパスする" 
という言葉は、通常、何かを回避して直接的に何かを行うこ
とを指します。この文脈で "接続プールをバイパスする" とは、Spring Boot
が提供するデフォルトの接続プールアルゴリズムを使用せずに、開発者が
独自の接続プールを設定することを意味します。

JDBC　
    ・JavaプログラムからＤＢにアクセスするための標準ＡＰＩの一つ。
    ・

発行する　表現
SQLのDB格納元は開発者が作っておいてJavaからいじりたいときにJDBC
が使われる。その時にクライアントがアクションを起こした時にSQLが使われるから
発行という表現になる。

Spring JDBC(Spring JDBC)
    特長
    ・自分でNativeなSQLを書く。
    ・Spring JDBCはデフォのJDBCをいい感じに使えるようにした奴
    ・JdbcTemplateクラスのメソッドを使うだけでデータ登録/更新/検索/削除が可能。
    ・RowMapperインターフェースを使えばBeanクラスへのマッピング処理をいい感じにできる。
    ・application.propertiesにDBDB接続情報を定義するだけで接続可能(これはSpringBootの機能である)

JPA

ORM( Object-relational mapping、O/RM、ORM)
    ・

セマンティクス(semantics) 意味や意味論
        IT　コンピュータに文書や情報のもつ意味を正確に解釈させ
            文書の関連付けや情報収集などの処理を自動的に行わせている。

ユーザーエクリペリエンス（UX）「User Experience」
    ・ユーザーが得られる体験のことを指す。

データバインディング
    バインディング（※関連付け、結びつける、拘束する）
    ・データバインディングはアプリUIとそこに表示されているデータとの間を確立する処理
/---*設計思想・駆動*---/　
ドメインオブジェクト
    定義
ドメインモデル設計　：　https://zenn.dev/marimoofficial/articles/120fa4932995fe
    ・要点
        ・オブジェクト指向で業務ロジックを整理する
        ・業務の関心ごとにコードを直接対応させ、どこに何が書いてあるかわかりやすく整理する。
        ・業務ルールの変更や追加の時に、変更の影響を狭い範囲に閉じ込める。
        ・複雑なロジックを整理しやすい。
    ・ドメインモデルはむずいのか。
        ・要件定義やオブジェクト指向プログラミングが足りないや手続き型の設計死か知らない場合。
    ・ドメインモデルを設計するのに必要な活動2点
        ・分析・・・人間のやりたいことを正しく正しく理解する
        ・設計・・・人間のやりたいことを動くソフトウェアとして実現する方法を考える。
            ・必要な行動   
                ・要件の聞き取り
                ・不明点を確かめる会話
                ・図や表を使って整理
                ・理解した結果を記録するための文書の作成。
            ・設計に必要な行動
                ・分析した内容をもとにプログラムをどのような構造で組み立てればよいか。
                    -- 検討事項
                        - パッケージ構成
                        - クラス構成と名前
                        - メソッド構成と名前

ドメインモデルとデータモデルでは何が違うのか
    ・ドメインモデル・・・業務ロジックの整理の手法。業務データを判断/加工計算するためのロジック
                        を「クラス」という単位で整理するのがドメインオブジェクトの考え方。
    ・データモデル・・・・データが主役。業務で発生する様々なデータを整理してどのようにテーブルに記録するか
                        を考える。
DDD（Domain-Driven-Design）：　https://www.ogis-ri.co.jp/otc/hiroba/technical/DDDEssence/chap1.html#:~:text=DDD%E3%81%A8%E3%81%AF%E3%81%A9%E3%82%93%E3%81%AA%E8%A8%AD%E8%A8%88,%E3%81%93%E3%81%86%E3%81%A8%E3%81%99%E3%82%8B%E8%80%83%E3%81%88%E6%96%B9%E3%81%A7%E3%81%99%E3%80%82
　前提知識
    ・ここでのドメインは「知識、影響力、活動の一領域」
        →ドメイン層はユーザの業務に直接関わる。
    ・アジャルな開発プロセスを前提にしている。
    ドメイン駆動設計
        定義
            ・デザインパターン・設計思想・哲学である。
            ・ドメインモデルをソフトウェア開発の中心においてコードやコミュニケーションを
            　　常にドメインモデルと一体化させながら、ドメインモデルを反復的に深化させることで
            　　より価値の高いアプリを生み出していこうとする考え。
        要点
            ・ドメインモデルはドメイン知識を含めながら反復的(iterative)に深化させていく。
            ・ドメインモデルが、開発者とドメイン知識を持つ人（ユーザ、専門家等）との共通言語となるようにする。
            ・ドメインモデルと実装コードとがきちんと対応つけられるようにする。

URI  =  URL + URN
         URI :  世の中のすべてのリソースを識別する．    URL： 位置を示す． URN： 名前を示す．
　  UUID： 世の中のすべてのリソースを識別するためのID       １２８bit   例）GUID: 6fc39073-84d7-4aa9-8299-7965c89aae3b
　
ファクトリメソッド（Factory Method）　https://qiita.com/shoheiyokoyama/items/d752834a6a2e208b90ca
工場って言われてるくらいだからオブジェクトの生成方法を決める。
　前提知識
    ・インスタンスの生成方法は複数の種類がある。
    ・Factoryパターンがある。
        ・定義  
            ・Factoryクラスがオブジェクトの生成処理に加えて生成する
                Objectの種類の変更をファクトリの処理のなかで動的に行う。
                　※　多種多様なメソッドを作ることができ、コンストラクタで指定するより多様になる。
    定義
    ・インスタンスの作り方　生成処理を担当するメソッドのことを指す。
    ・要約すると
インスタンスとオブジェクトの使いわけ（厳密）
    インスタンス
    ・特定のクラスから生成されたObjectの個別コピーを渡す。
        例
            ・Personクラスから「John」と「Abell」というオブジェクトが生まれる
    オブジェクト
    ・プログラムされて処理される実体の総称を指す。
    ・インスタンスを生成している元のクラス（設計図）のことではなく、
        そもそも　「実行時に稼働している実体がオブジェクトと総称される」

/-----*http*-----/
主なメソッドﾞ（クライアントからサーバへ）
　-　GET：URLで指示されているデータをサーバに要求．（取得）　URLに書き込まれる。
　　	本来（REST）であれば，同じURLのデータは同じ．キャッシ可能．
　-　POST：サーバにデータを送信する．（作成）
		Body部にデータを格納して送る．結果が変わる（動的なページ）　URLに書き込まれない。
　-　PUT：サーバ上のデータを更新する．（更新） 
　　　　 Body部にデータを格納して送る．　　
　-　DELETE：サーバ上のデータを削除．（削除）

　-　HEAD：HTTPのヘッダ部分だけを要求． （取得）


XMLデータ記述しき　json yaml town等。


/---*Springbootの構成*---/　communityboard
SQL
    JDBC API: Javaからのデータベース操作するインターフェイス
    MySQLDriver: MySQLへの接続ドライバ

Security
    Spring Security: セキュリティ対策を実装するフレームワーク

Template Engines
    Thymeleaf:ビューを作成するためのテンプレートエンジン

web
    Spring　Web:Webアプリを構築するためのスターター

デザインパターンとは
    ・過去他のプログラマが直面している問題を幾度となく考え、それを再利用したものをいう。
        ・具体的に
            ・よく使われる設計を一般化された形でまとめたもの
            ・具体的な実装を提供するものではなく、あくまでコンセプト（概念・骨組み）として参照されていること。

DI(Dependency Injection:依存性注入)　　https://programming-tips.jp/archives/o/25/index.html
    要約
        ・クラス間の依存を弱くするための設計パターン
            ・依存性とはオブジェクトのこと
        ・自身のクラスで直接使いたいクラスを生成するのではなく、外部で生成された
        　オブジェクトを受け取ることでクラス間の依存性を減らすことができる。
        ・インターフェイスを定義し外部からそのインターフェイスを実装されたクラスを受け取る。
        　ので外部クラスからの注入　依存性注入と呼ばれる。
    説明
        ・ＤＩはあるクラスに対して、依存性（オブジェクト）を外側から注入することをいう。
        例
        private final UserCommentRepository repository;
        public A(UserCommentRepository repository) { //コンストラクタで外部(mainメソッドのあるクラス)から受け取り
            this.repository = repository
        }
        このようなコードが生成される。
            このようなコードを省略する事としてspringframeworkのアノテーションの@Autowiredなどのアノテーションを使用するが、
            finalとフィールドにつけてある場合lombokのRequiredArgsConstructorをクラスに定義した場合自動的にfinal修飾子が
            ついているフィールドかつ初期化されていない物はコンストラクタ定義されるので@Autowiredはいらない。
    Q　なぜインターフェイスを使用するのか
    A　コンストラクタ内部で 例：）new AとしてしまうとのちにAクラスが引数を受け取るってなった場合コンストラクタをA（引数あり）みたいな感じ
    　　で直さなければいけなくなる。だがインターフェイスにして外部から注入される場合、注入する側の外部クラスB（mainメソッドあり）とかが
        変えるだけで自身のコンストラクタは変えなくて良いということになる。なぜならインターフェイスが実装されたクラスなら受け取ることができるからである。
        コンストラクタの引数が変わってようが外部クラスから注入された物を受け取るだけなので内部のコンストラクタは変える必要がないのである。

    ポイント
        ・new                   強い依存
        ・依存性の注入(DI)は    弱い依存

/-----*annotation @ アノテーション*-----/
    lombok refe(公式？)　https://projectlombok.org/features/constructor
    @Param ：MyBatisのSQLクエリ内で使用する変数(パラメータ)を使用できるもの。
    例
    Java　code
    ・void updateUser(@Param("userId") int userId, @Param("newUsername") String newUsername);

    SQL code
     UPDATE users
     SET username = #{newUsername}
     WHERE id = #{userId}

    @Bean （ビーンについて）　https://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html
    基本概念
    ・XMLの<beans>と関連がある。
    利用・使用目的
        ・Spring IoCコンテナによって管理されるオブジェクトを
            「インスタンス化・構成・初期化」
        ・そのインスタンスをSpringのコンテナに格納する

    @Configuration
    定義
        ・Beanの定義ソースであることを示す。クラスに付ける。
        ・同じクラス内の他のBean間のメソッドを呼ぶことで依存関係の定義できる

    @SpringbootApplication
    定義
      Spring Bootは、ほかに設定ファイルなどを一切書かなくとも、
     「SpringBasicApplicationというクラスがSpring Bootで起動する」ということを知ることができるのです。

    @RequiredArgsConstructor//
    参考　https://projectlombok.org/features/constructor
    　➀final修飾子を探してかつ初期化されていないものを探す。でpublic クラス名(➀に合致したもの　変数名){this.変数名 = 変数名}

    Mybatis　refe https://mybatis.org/mybatis-3/ja/sqlmap-xml.html#select
    
    @select
        ・データを取り出すことがd系て初めてデータバースにデータを使いする意味がある。
        
    @Repository　https://springhack.com/springboot%E3%81%AErepository%E3%82%A2%E3%83%8E%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/

    リポジトリクラスとは
    ・データソースをアプリの残りの部分から分離し、アプリの残りの部分にデータアクセスのための
    クリーンなAPIを提供。ベストプラクティス

    @Autowired 　https://qiita.com/yuto-hatano/items/69d01343f710117e4243
        ・DIさせるフィールドにつける。
        インジェクション　

    /*----annnotationの作り方----*/
    参考　https://blog.satotaichi.info/meta-annotations/





マークアップ言語について
・SGMLとXMLとHTMLは　タグ　で構成されているマークアップ言語
    特徴
    ・「視覚表現」　や　「文書構造」　などを定義する
    ・　タグ　は　スキーマ言語と呼ばれる使用によって決定している。
    ・  基本的にDTD宣言をする。　例　　<!doctype HTML>　　　
    ・  んで何か拡張をしたいときにXML Schemaを利用する　

XML　Schemaについて
　

XMLについて
参考
https://triple-underscore.github.io/xml-names-ja.html?1.1
    XML「Extensible Markup Language」の略で、日本語では「拡張可能なマークアップ言語」
        特定の企業が提供している技術ではなく、インターネット上で使用される各種技術の標準化推進団体である、
        W3C（World Wide Web Consortium）によるオープンな規格です。
    目的
        ・主にデータのやり取りや管理を簡単にする目的に使われる。
        ・URIが主に外部参照として使われる　RFC3989を参照

    特徴
    ・データの意味がわかりやすい
    ・拡張性が高い　論理的な構造・内容・属性を表現するドキュメント（文献）
    ・あらゆるコンピュータシステムへ適応可能
    ・SGMLの特徴を厳密に受け継ぎ、HTML以上の拡張性を実現させた物。
    ・
    使用用途
    ・マニュアル（取扱説明書）、カタログ、評生申請書、医療カルテの運用・管理等に使用されている。
    XMLを使って文章中のデータの要素名や属性を定義することで、
    　マシン側にデータの重要度（大小関係など）を認識させられます

    RFC3989参照してわかること。
        定義
        ・定義としてXMLについて書いてあるが、そこではURIも少々書かれている。
        URI (Uniform Resource Identifier)について
        　定義
            ・リソースを識別するための手段。

        　詳細
            ・World Wide datesから派生している。
            ・
　XMLの構文について
    特徴
    ・※データのマークアップ言語である。
        ・データを構造化し階層的に整理するための言語
        ・スキーマ言語（基本:  DTD や 拡張： XML Schema）を定義する
    ・スキーマ言語を定義できる。　schema 名詞　図表、図解、概要　
        スキーマ言語:マークアップ言語で使用されている要素や属性の意味や構造を定義するための言語
            ・DTDやXML Schema　がある。
    基本ルール
        ・「要素」、「属性」、「テキスト」で構成される。
        ・ XML文書の一番外側の要素のことをルート要素と呼ぶ
    構文構成
        ・XML宣言　文書型宣言　データ部分
            
            文書型宣言
            ・どういう要素や属性を、どういう順序で記述するのか　ルールを定義する。
            ・主に２種類のやり方がある。
                ・外部の文書型定義ファイルを指定する方法
                    <!DOCTYPE chapter SYSTEM "document.dtd">
                    
                ・直接文書型定義を直接に記述する方法
                    
                    <!DOCTYPE 在庫データ[
                        <!ELEMENT 在庫データ (商品)>
                        <!ELEMENT 商品 (名前, 個数)>
                        <!ELEMENT 名前 (#PCDATA)>
                        <!ELEMENT 個数 (#PCDATA)>
                    ]>

                    <在庫データ>
                        <商品>
                            <名前>本棚</名前>
                            <個数>12</個数>
                        </商品>
                    </在庫データ>
    




RFC(Request for Comments 意味：コメントを求める)
    定義
        ・インターネット技術の標準的な仕様を記した文書のこと。
        ・新しいRFCが発行されると1ずつ増加します。
    作成団体
        ・IETE(Internet Engineering Task Force)が作成
